<?php

/**
 * @file stripe.module
 * Drupal hooks used for integrating the Stripe service.
 */

/**
 * Implements hook_help().
 */
function stripe_help($path, $arg) {
  if ($path == 'admin/config/stripe/admin/keys') {
    $output = '<ol>';
    $output .= '<li>' . t('Enter the API keys you get from your <a href="@url">Stripe account page</a>.', array('@url' => 'https://manage.stripe.com/account')) . '</li>';
    $output .= '<li>' . t('Use the radio buttons to choose which API Key should be used with this site.') . '</li>';
    $output .= '<li>' . t('After designating an API Key, you might want to try out <a href="@url">the test form</a>.', array('@url' => '/admin/config/stripe/test')) . '</li>';
    $output .= '</ol>';
    return $output;
  }
  if ($path == 'admin/config/stripe/admin/test') {
    return '<p>' . t('This form is to test responses from Stripe. The default values are accepted by Stripe for testing purposes. Before you can use this form, you should <a href="@url">designate an active API Key</a>.', array('@url' => '/admin/config/stripe/keys')) . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function stripe_permission() {
  return array(
    'administer stripe' => array(
      'title' => t('Administer the Stripe module'),
      'description' => t('Allows access to configure API Keys and to the test form.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function stripe_menu() {
  $items['admin/config/stripe'] = array(
    'title' => 'Stripe Payment Gateway',
    'description' => 'Configuration, and testing',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer stripe'),
    'position' => 'right',
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/stripe/settings'] = array(
    'title' => 'Stripe Settings',
    'description' => 'API keys and other general Stripe settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stripe_admin_keys'),
    'access arguments' => array('administer stripe'),
    'file' => 'stripe.admin.inc',
  );
  $items['admin/config/stripe/test'] = array(
    'title' => 'Test form',
    'description' => 'A form for testing Stripe responses.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('stripe_admin_test'),
    'access arguments' => array('administer stripe'),
    'file' => 'stripe.test.inc',
  );
  $items['stripe/webhooks'] = array(
    'title' => 'Stripe Webhooks',
    'description' => 'Handler for incoming Stripe Webhook requests.',
    'page callback' => 'stripe_webhooks_callback',
    'delivery callback' => 'stripe_webhook_response_output',
    'access callback' => TRUE,
    'file' => 'stripe.pages.inc',
  );

  return $items;
}

/**
 * Helper function to go fetch the normal form elements.
 */
function stripe_form_default_items() {
  $identifier = stripe_form_identifier();
  $form['card_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Card Number'),
    '#size' => 16,
    '#attributes' => array(
      'autocomplete' => 'off',
      'class' => array('stripe-number', $identifier),
    ),
  );

  $form['card_cvc'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC'),
    '#size' => 4,
    '#attributes' => array(
      'autocomplete' => 'off',
      'class' => array('stripe-cvc'),
    ),
  );

  // Will be re-enabled by javascript. This ensures that the element cannot be
  // used unless javascript is fully functioning.
  $form['card_number']['#disabled'] =
     $form['card_cvc']['#disabled'] = TRUE;
  // Remove the #name field before rendering, so that this element will not
  // get posted back to the server.
  $form['card_number']['#pre_render'] =
     $form['card_cvc']['#pre_render'] = array('stripe_element_remove_name');
  // Ensure the element is empty when submitted.
  $form['card_number']['#element_validate'] =
     $form['card_cvc']['#element_validate'] = array('stripe_element_validate_empty');


  $form['card_expiry_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Month'),
    '#attributes' => array(
      'class' => array('stripe-exp_month'),
    ),
    '#multiple' => FALSE,
    '#options' => array(
      '01' => t('01 (Jan)'),
      '02' => t('02 (Feb)'),
      '03' => t('03 (Mar)'),
      '04' => t('04 (Apr)'),
      '05' => t('05 (May)'),
      '06' => t('06 (Jun)'),
      '07' => t('07 (Jul)'),
      '08' => t('08 (Aug)'),
      '09' => t('09 (Sep)'),
      '10' => t('10 (Oct)'),
      '11' => t('11 (Nov)'),
      '12' => t('12 (Dec)'),
    ),
  );

  $current_year = date('Y');
  $years = range($current_year, $current_year + 15);
  $year_options = array_combine($years, $years);

  $form['card_expiry_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Year'),
    '#attributes' => array(
      'class' => array('stripe-exp_year'),
    ),
    '#options' => $year_options,
  );

  // The stripe JS will populate this value upon successful submission.
  $form['stripe_token'] = array(
    '#type' => 'hidden',
    '#element_validate' => array('stripe_token_element_validate'),
  );

  if ($pub_key = stripe_get_publishable_key()) {
    $js_settings = array(
      'pubKey' => $pub_key,
      'identifiers' => array($identifier),
    );

    // Attach the javascript from Stripe.
    $form['#attached']['js']['https://js.stripe.com/v1/'] = array(
      'type' => 'external',
    );
    // Attach our javascript.
    $form['#attached']['js'][] = drupal_get_path('module', 'stripe') . '/stripe.js';
    // Attach the javascript settings.
    $form['#attached']['js'][] = array(
      'data' => array('stripe' => $js_settings),
      'type' => 'setting',
    );
  }

  return $form;
}

/**
 * Return a unique identifier for each stripe form per page load. This is used
 * in the stripe.js to know which form was submitted.
 */
function stripe_form_identifier() {
  $i = &drupal_static(__FUNCTION__, 1);
  return 'stripe-form-' . $i++;
}

/**
 * Validate the stripe token to be sure that it was set by the javascript.
 */
function stripe_token_element_validate($element, $form_state, $form) {
  if (empty($element['#value'])) {
    form_error($element, t('There was a problem processing your payment.'));
  }
}

/**
 * Element validate function to ensure that the posted value for an element is
 * empty. We do this just to double check that credit card numbers are not
 * getting posted to the server, as this would create PCI implications. If they
 * are making it back to the server, we stop the form from processing, and log a
 * watchdog alert.
 */
function stripe_element_validate_empty($element, $form_state, $form) {
  static $logged = FALSE;
  // Log a watchdog message the first time only. No need to log two messages.
  if (!empty($element['#value']) && !$logged) {
    // Set an error on the first element this happened on.
    form_error($element, 'There was a problem processing your payment. For '   .
                         'your own protection, it is recommended you do NOT '  .
                         'attempt to re-enter your payment information.');
    // Now log a watchdog alert.
    $message = 'Credit Card information is being posted to your server. '      .
               'Please disable Stripe module immediately and submit a bug '    .
               'report at http://drupal.org/node/add/project-issue/stripe.';
    watchdog('stripe', $message, NULL, WATCHDOG_ALERT);
    $logged = TRUE;
  }
}

/**
 * Pre render callback for Stripe elements with sensitive information, to remove
 * the 'name' attribute. This ensures that the browser doesn't post the values
 * back to the server.
 */
function stripe_element_remove_name($element) {
  unset($element['#name']);
  return $element;
}

/**
 * Returns TRUE if Stripe is in live mode.
 */
function tg_stripe_live() {
  $status = variable_get('stripe_key_status', 'test');
  return $status == 'live' ? TRUE : FALSE;
}

/**
 * Get the Stripe publishable key.
 */
function stripe_get_publishable_key() {
  $status = variable_get('stripe_key_status', 'test');
  $pub_key_name = 'stripe_' . $status . '_publishable';
  $pub_key = variable_get($pub_key_name, '');
  return $pub_key;
}

/**
 * Implements hook_libraries_info().
 */
function stripe_libraries_info() {
  $libraries['stripe'] = array(
    'name' => 'Stripe Payment API PHP Library',
    'vendor url' => 'https://stripe.com/docs/libraries',
    'download url' => 'https://stripe.com/docs/libraries#php-library',
    'version arguments' => array(
      'file' => 'VERSION',
      'pattern' => '/([0-9a-zA-Z\.-]+)/',
      'lines' => 1,
    ),
    'files' => array('php' => array('lib/Stripe.php')),
    'callbacks' => array('post-load' => array('stripe_libraries_postload_callback')),
  );
  return $libraries;
}

/**
 * Post-load callback for the Stripe PHP Library.
 *
 * @param array $library
 *   An array of library information.
 * @param string $version
 *   If the $library array belongs to a certain version, a string containing the
 *   version.
 * @param string $variant
 *   If the $library array belongs to a certain variant, a string containing the
 *   variant name.
 */
function stripe_libraries_postload_callback($library, $version = NULL, $variant = NULL) {
  if (!empty($library['loaded'])) {
    $status = variable_get('stripe_key_status', 'test');
    $secret_key_name = 'stripe_' . $status . '_secret';
    $secret_key = variable_get($secret_key_name, '');

    empty($secret_key) ? NULL : Stripe::setApiKey($secret_key);
  }
}

/**
 * Get the stripe key(s).
 *
 * @param string $type
 *   The type of the key to retrieve, either 'secret' or 'publishable'
 *   (optional).
 * @param string $set
 *   The keys set to use, either 'test' or 'live'. Defaults to the value of the
 *   'stripe_key_status' variable.
 *
 * @return array|string
 *   If $type is NULL, an array containing both the secret and publishable keys.
 *   Otherwise, the request keys.
 */
function stripe_get_key($type = NULL, $set = NULL) {
  $keys = drupal_static(__FUNCTION__, array());
  if ($set === NULL) {
    $set = variable_get('stripe_key_status', 'test');
  }
  if (empty($keys[$set])) {
    $keys[$set] = array(
      'secret' => variable_get("stripe_{$set}_secret", ''),
      'publishable' => variable_get("stripe_{$set}_publishable", ''),
    );
  }
  return ($type === NULL) ? $keys[$set] : (isset($keys[$set][$type]) ? $keys[$set][$type] : NULL);
}

/**
 * Returns data in plain text.
 */
function stripe_webhook_response_output($var = NULL) {
  drupal_add_http_header('Content-Type', 'text/plain');
  if (isset($var)) {
    print $var;
  }
}
